name: GitHub Self-service

on:
  workflow_dispatch:
    inputs:
      repo-name:
        description: 'Repository Name'
        required: true
      app-type:
        description: 'App Type'
        required: true
        type: choice
        default: Angular
        options:
          - Angular
          - .NET
      project-name:
        description: 'Project Name'
        required: true
      clean-up:
        description: 'Clean up Resources'
        required: true
        type: boolean
        default: true

env:
  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
  REPO: ${{ github.event.inputs.repo-name }}
  PROJECT: ${{ github.event.inputs.project-name }}
  OWNER: ${{ github.repository_owner }}
  CREATED_REPO: ${{ github.repository_owner }}/${{ github.event.inputs.repo-name }}
  CLEAN_UP: ${{ github.event.inputs.clean-up }}
  APP_TYPE: ${{ github.event.inputs.app-type }}

jobs:
  create-repository:
    runs-on: ubuntu-latest
      
    steps:
      - name: Download Angular CLI
        if: ${{ env.APP_TYPE == 'Angular' }}
        run: |
          npm install -g @angular/cli
          ng --help

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "<>"
          git config --global init.defaultBranch main

      - name: Create Angular Project
        if: ${{ env.APP_TYPE == 'Angular' }}
        run: |
          ng n $REPO --defaults 

      - name: Create .NET Project
        if: ${{ env.APP_TYPE == '.NET' }}
        run: |
          mkdir $REPO
          cd $REPO
          git init
          dotnet new sln --name $REPO
          mkdir src
          cd src
          dotnet new webapi -n $REPO.Api
          dotnet new classlib -n $REPO.Application
          dotnet new classlib -n $REPO.Domain
          dotnet new classlib -n $REPO.Data
          cd ..
          dotnet sln add src/$REPO.Api/$REPO.Api.csproj
          dotnet sln add src/$REPO.Application/$REPO.Application.csproj
          dotnet sln add src/$REPO.Domain/$REPO.Domain.csproj
          dotnet sln add src/$REPO.Data/$REPO.Data.csproj
          git add .
          git status
          git commit -m "Initial Commit"

      - name: Create Repo
        run: |
          cd $REPO
          REPO_NAME=$(gh repo create $REPO --public --source=. --push) 
          echo $REPO_NAME
        
      - name: View Repo
        run: gh repo view $CREATED_REPO

      - name: Create Branch Protection Rule
        run: |
          curl -X "POST" "https://api.github.com/repos/${OWNER}/${REPO}/rulesets" \
          -H "Authorization: Bearer ${GITHUB_TOKEN}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          -H "Content-Type: application/json" \
          -d '{
            "name": "require PR ruleset",
            "target": "branch",
            "enforcement": "active",
            "conditions": {
              "ref_name": {
                "include": ["refs/heads/main"],
                "exclude": []
              }
            },
            "rules": [
              {
                "type": "pull_request",
                "parameters": {
                  "dismiss_stale_reviews_on_push": true,
                  "require_code_owner_review": false,
                  "require_last_push_approval": false,
                  "required_approving_review_count": 1,
                  "required_review_thread_resolution": true
                }
              }
            ]
          }'

      - name: Enable Discussions
        run: gh repo edit $CREATED_REPO --enable-discussions

      - name: Create Label - Security Patch
        run: gh label create "security patch" -d "security update needed" -R $CREATED_REPO -c f54242

      - name: List Labels
        run: gh label list -R $CREATED_REPO

      - name: Delete Repo
        if: ${{ env.CLEAN_UP == 'true' }}
        run: gh repo delete $CREATED_REPO --yes

  create-project:
    needs: [create-repository]
    runs-on: ubuntu-latest

    steps:
      - name: Create Project
        id: create-project-step
        run: |
          PROJECT_DETAILS=$(gh project create --owner @me --title "$PROJECT" --format json)
          PROJECT_NUMBER=$(echo "$PROJECT_DETAILS" | jq -r '.number')
          echo "PROJECT_NUMBER=${PROJECT_NUMBER}" >> $GITHUB_ENV
          echo "PROJECT_NUMBER=${PROJECT_NUMBER}" >> $GITHUB_OUTPUT
          
      - name: Test GitHub Output
        run: |
          echo output from last job is: ${{ steps.create-project-step.outputs.PROJECT_NUMBER }}

      - name: View Project
        run: gh project view $PROJECT_NUMBER --owner @me

      - name: Create Project Field - Effort
        run: gh project field-create $PROJECT_NUMBER --owner @me --name "Effort" --data-type "NUMBER"

      - name: Create Project Field - Priority
        run: gh project field-create $PROJECT_NUMBER --owner @me --name "Priority" --data-type "NUMBER"
      
      - name: List Project Fields
        run: gh project field-list $PROJECT_NUMBER --owner @me

      - name: Delete Project
        run: gh

      - name: Delete Project
        if: ${{ env.CLEAN_UP == 'true' }}
        run: gh project delete $PROJECT_NUMBER --owner "@me"
